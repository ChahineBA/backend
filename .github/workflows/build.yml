name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build and push Docker image (latest)
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/chahineba/cloud-backend:latest
          cache-from: type=registry,ref=ghcr.io/chahineba/cloud-backend:latest
          cache-to: type=inline
          build-args: |
            MONGO_URI=${{ secrets.MONGO_URI }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_COLLECTION=${{ secrets.MONGO_COLLECTION }}

      - name: Build and push Docker image with version tag
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/chahineba/cloud-backend:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/chahineba/cloud-backend:latest
          cache-to: type=inline
          build-args: |
            MONGO_URI=${{ secrets.MONGO_URI }}
            MONGO_DB=${{ secrets.MONGO_DB }}
            MONGO_COLLECTION=${{ secrets.MONGO_COLLECTION }}

      - name: Install OpenShift CLI
        run: |
          curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz | tar -xz
          sudo mv oc /usr/local/bin/

      - name: Log in to OpenShift
        run: |
          oc login --server=${{ secrets.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }}

      - name: Switch to OpenShift project
        run: |
          oc project ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Deploy or Update OpenShift App
        run: |
          if oc get deployment cloud-backend &>/dev/null; then
            echo "Updating existing deployment..."
            oc set image deployment/cloud-backend cloud-backend=ghcr.io/chahineba/cloud-backend:${{ github.sha }}
          else
            echo "Creating new deployment..."
            oc new-app ghcr.io/chahineba/cloud-backend:${{ github.sha }} --name=cloud-backend
          fi

      - name: Expose Service (if not exists)
        run: |
          if ! oc get route cloud-backend &>/dev/null; then
            oc expose svc/cloud-backend
          fi

      - name: Wait for Deployment Rollout
        run: |
          oc rollout status deployment/cloud-backend
